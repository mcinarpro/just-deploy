name: Deploy to Environments

on:
  push:
    branches:
      - dev
      - staging
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Extract repository name
        shell: bash
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # AVERTISSEMENT : L'utilisation du compte root avec un mot de passe présente des risques de sécurité importants.

            # Set environment-specific variables
            if [ "${{ env.BRANCH_NAME }}" = "dev" ]; then
              ENV_NAME="dev"
              PORT=3001
            elif [ "${{ env.BRANCH_NAME }}" = "staging" ]; then
              ENV_NAME="staging"
              PORT=3002
            elif [ "${{ env.BRANCH_NAME }}" = "main" ]; then
              ENV_NAME="prod"
              PORT=3003
            else
              echo "Unknown branch: ${{ env.BRANCH_NAME }}"
              exit 1
            fi

            # Pull the new image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}

            # Stop and remove the old container if it exists
            docker stop ${{ env.REPO_NAME }}-${ENV_NAME} || true
            docker rm ${{ env.REPO_NAME }}-${ENV_NAME} || true

            # Run the new container
            docker run -d --name ${{ env.REPO_NAME }}-${ENV_NAME} -p ${PORT}:3000 \
              -e NODE_ENV=${ENV_NAME} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}

            echo "Deployed ${{ env.BRANCH_NAME }} to ${ENV_NAME} environment on port ${PORT}"
